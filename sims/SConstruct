# Simulations for lcfit
import glob
import os
import os.path

from nestly import Nest, stripext
from nestly.scons import SConsWrap
from SCons.Script import Environment

env = Environment(ENV=os.environ.copy())
env.PrependENVPath('PATH', '../_build/Debug')
env.PrependENVPath('PATH', '..')

n = Nest(base_dict={'n_sites': 1000})
w = SConsWrap(n, 'runs')

models = {
        # Nucleotide models
        #'JC': {'name': 'JC69', 'alphabet': 'DNA'},
        #'HKY85-2.0': {'name': 'HKY85(kappa=2.0,theta=0.4,theta1=0.6,theta2=0.5)',
                      #'alphabet': 'DNA',
                      #'ignore': 'HKY85.kappa,HKY85.theta,HKY85.theta1,HKY85.theta2',},

        # Codon models
        #'MG94-2.0': {'name': 'MG94(genetic_code=StandardGeneticCode,rho=2.0)',
                     #'alphabet': 'Codon(letter=DNA)',
                     #'ignore': 'MG94.rho'},

        # Covarion
        #'TS98-JC': {'name': 'TS98(model=JC69,s1=2.0,s2=0.4)',
                    #'alphabet': 'DNA',
                    #'ignore': 'TS98.s1,TS98.s2'},

        # Mixture
        #'TN93-mix': {'name': 'MixedModel(model=TN93(kappa1=Gamma(n=4,alpha=3,beta=1),kappa2=Exponential(n=2,lambda=2),theta=0.5,theta1=0.2,theta2=0.1))',
                     #'alphabet': 'DNA',
                     #'ignore': """TN93.kappa1_Gamma.alpha,TN93.kappa1_Gamma.beta,TN93.kappa2_Exponential.lambda,TN93.theta,TN93.theta1,TN93.theta2""",},

        # Nonhomogenous
        'TN93-nonhom': {
            'alphabet': 'DNA',
            'detail': """
nonhomogeneous = general
nonhomogeneous.number_of_models = 3
nonhomogeneous.root_freq=GC(theta=0.6)

model1=T92()
model2=MixedModel(model=T92(kappa=Simple(values=(4,10,20),probas=(0.1,0.5,0.4))))
model3=MixedModel(model=TN93(theta1=Simple(values=(0.1,0.5,0.9),probas=(0.3,0.2,0.5))))

model1.nodes_id=0:6
model2.nodes_id=7:12
model3.nodes_id=13:17
""",
            'ignore': 'GC.theta,T92.kappa_1,T92.theta_1,T92.kappa_Simple.V1_1,T92.kappa_Simple.theta1_1,T92.kappa_Simple.V2_1,T92.kappa_Simple.theta2_1,T92.kappa_Simple.V3_1,T92.theta_2,TN93.kappa1_1,TN93.kappa2_1,TN93.theta_1,TN93.theta1_Simple.V1_1,TN93.theta1_Simple.theta1_1,TN93.theta1_Simple.V2_1,TN93.theta1_Simple.theta2_1,TN93.theta1_Simple.V3_1,TN93.theta2_1'},

        # Protein models
        #'JTT92': {'name': 'JTT92', 'alphabet':'Protein'},
        #'WAG01': {'name': 'WAG01', 'alphabet':'Protein'},
        #'LG08': {'name': 'LG08', 'alphabet':'Protein'},
}

initial_values = ['1100,800,2.0,0.5',]

sample_values  = ['0.1,0.2,0.5',]

rdist = {
        'uniform': 'Uniform()',
#        'gamma4-1.0': 'Gamma(n=4, alpha=1.0)',
}

n.add('source_tree', [os.path.abspath(i) for i in glob.glob('trees/tree0006.tre')],
      label_func=stripext)

n.add('model_name', models)
n.add('model', lambda c: [models[c['model_name']]], create_dir=False)
n.add('rdist_name', rdist)
n.add('rdist', lambda c: [rdist[c['rdist_name']]], create_dir=False)
n.add('initial', initial_values, label_func=lambda s: s.replace(',', '_'), create_dir=False)
n.add('sample', sample_values, label_func=lambda s: s.replace(',', '_'), create_dir=False)
n.add('tolerance', [10**i for i in xrange(-6, 0)], label_func='{0:.1E}'.format)

@w.add_target()
def model_file(outdir, c):
    def write_model_action(target, source, env):
        with open(str(target[0]), 'w') as fp:
            print >> fp, """alphabet={model[alphabet]}
rate_distribution={rdist}""".format(**c)
            if 'name' in c['model']:
                print >> fp, """model={model[name]}""".format(**c)
            else:
                print >> fp, """{model[detail]}""".format(**c)
    target = os.path.join(outdir, 'model.bpp')
    return env.Command(target, [], write_model_action)[0]

@w.add_target()
def seqgen_file(outdir, c):
    def write_seqgen_file_action(target, source, env):
        with open(str(target[0]), 'w') as fp:
            print >> fp, """
param={model_file}
number_of_sites={n_sites}
input.tree.format=Newick
output.sequence.format=Fasta()""".format(**c)

    target = os.path.join(outdir, 'seqgen.bpp')
    return env.Command(target, [c['model_file'], c['source_tree']], write_seqgen_file_action)[0]

@w.add_target()
def alignment(outdir, c):
    target = os.path.join(outdir, 'alignment.fasta')
    cmd = ('bppseqgen '
            'param=${SOURCES[1]} '
            'input.tree.file=${SOURCES[0]} '
            'output.sequence.file=$TARGET')
    return env.Command(target, [c['source_tree'], c['seqgen_file']], cmd)[0]

@w.add_target()
def bppml_file(outdir, c):
    def write_bppml_file_action(target, source, env):
        d = c.copy()
        if 'ignore' not in d['model']:
            d['model']['ignore'] = ''
        target_base = os.path.join(outdir, 'ml_tree')
        with open(str(target[0]), 'w') as fp:
            print >> fp, """
input.sequence.file={alignment}
input.sequence.format=Fasta()
input.sequence.sites_to_use=all
input.sequence.max_gap_allowed=100%

param={model_file}

init.tree=user
input.tree.file={source_tree}
input.tree.format=Newick
init.brlen.method=Input


output.tree.file={target_base}.tre
output.tree.format=Newick
output.infos={target_base}.infos
output.estimates={target_base}.params.txt

optimization.verbose=0
optimization.ignore_parameter={model[ignore]}
optimization.method=DB
optimization.reparametrization=no
optimization.max_number_f_eval=10000
optimization.tolerance=0.000001

optimization.topology=no
optimization.topology.algorithm=NNI
optimization.topology.algorithm_nni.method=phyml
""".format(target_base=target_base, **d)

    target = os.path.join(outdir, 'bppml.bpp')
    return env.Command(target, [c['model_file'], c['source_tree'], c['alignment']], write_bppml_file_action)[0]

@w.add_target()
def ml_tree(outdir, c):
    target_base = os.path.join(outdir, 'ml_tree')
    target = target_base + '.tre'

    return env.Command(target,
            [c['bppml_file'], c['alignment'], c['source_tree']],
            'bppml param=$SOURCE')[0]

@w.add_target()
def lcfit(outdir, c):
    targets = [os.path.join(outdir, i) for i in ('lcfit_bls.csv', 'lcfit_maxima.csv', 'lcfit_fit.csv', 'lcfit_log.csv')]
    return env.Command(targets,
            [c['alignment'], c['ml_tree'], c['model_file']],
            'lcfit-compare '
            'param=${SOURCES[2]} '
            'input.tree.file=${SOURCES[1]} '
            'input.sequence.file=${SOURCES[0]} '
            'lcfit.starting.values=' + c['initial'] + ' ' +
            'lcfit.sample.branch.lengths=' + c['sample'] + ' ' +
            'lcfit.ml_tolerance=' + str(c['tolerance']) + ' ' +
            'lcfit.output.likelihoods_file=${TARGETS[0]} '
            'lcfit.output.maxima_file=${TARGETS[1]} '
            'lcfit.output.fit_file=${TARGETS[2]} '
            'lcfit.output.fit_log=${TARGETS[3]}')

@w.add_target()
def lcfit_plots(outdir, c):
    return env.Command(os.path.join(outdir, 'lcfit_plots.pdf'),
            c['lcfit'],
            'plot_fits.R $SOURCES $TARGET')

w.add_controls(env)
