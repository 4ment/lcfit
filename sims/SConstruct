# Simulations for lcfit
import glob
import os
import os.path

from nestly import Nest, stripext
from nestly.scons import SConsWrap
from SCons.Script import Environment

env = Environment(ENV=os.environ.copy())
env.PrependENVPath('PATH', '../_build')
env.PrependENVPath('PATH', '..')

n = Nest(base_dict={'n_sites': 1000})
w = SConsWrap(n, 'runs')

models = {
        'JC': 'JC69',
}
rdist = {
        'uniform': 'Uniform()',
#        'gamma4-1.0': 'Gamma(n=4, alpha=1.0)',
}


n.add('source_tree', [os.path.abspath(i) for i in glob.glob('trees/*.tre')][:3],
      label_func=stripext)

n.add('model_name', models)
n.add('model', lambda c: [models[c['model_name']]], create_dir=False)
n.add('rdist_name', rdist)
n.add('rdist', lambda c: [rdist[c['rdist_name']]], create_dir=False)

@w.add_target()
def model_file(outdir, c):
    def write_model_action(target, source, env):
        with open(str(target[0]), 'w') as fp:
            print >> fp, 'model={model}\nrate_distribution={rdist}'.format(**c)
    target = os.path.join(outdir, 'model.bpp')
    return env.Command(target, [], write_model_action)[0]

@w.add_target()
def seqgen_file(outdir, c):
    def write_seqgen_file_action(target, source, env):
        with open(str(target[0]), 'w') as fp:
            print >> fp, """
param={model_file}
number_of_sites={n_sites}
input.tree.format=Newick
output.sequence.format=Fasta()""".format(**c)

    target = os.path.join(outdir, 'seqgen.bpp')
    return env.Command(target, [c['model_file'], c['source_tree']], write_seqgen_file_action)[0]

@w.add_target()
def alignment(outdir, c):
    target = os.path.join(outdir, 'alignment.fasta')
    cmd = ('bppseqgen '
            'param=${SOURCES[1]} '
            'input.tree.file=${SOURCES[0]} '
            'output.sequence.file=$TARGET')
    return env.Command(target, [c['source_tree'], c['seqgen_file']], cmd)[0]

@w.add_target()
def bppml_file(outdir, c):
    def write_bppml_file_action(target, source, env):
        target_base = os.path.join(outdir, 'ml_tree')
        with open(str(target[0]), 'w') as fp:
            print >> fp, """
param={model_file}

input.sequence.file={alignment}
input.sequence.format=Fasta()
input.sequence.sites_to_use=all
input.sequence.max_gap_allowed=100%
init.tree=user
input.tree.file={source_tree}
input.tree.format=Newick
init.brlen.method=Input
alphabet=DNA

output.tree.file={target_base}.tre
output.tree.format=Newick
output.infos={target_base}.infos
output.estimates={target_base}.params.txt

optimization.verbose=0
optimization.method=DB
optimization.reparametrization=no
optimization.ignore_parameter=alpha
optimization.max_number_f_eval=10000
optimization.tolerance=0.000001

optimization.topology=no
optimization.topology.algorithm=NNI
optimization.topology.algorithm_nni.method=phyml
""".format(target_base=target_base, **c)

    target = os.path.join(outdir, 'bppml.bpp')
    return env.Command(target, [c['model_file'], c['source_tree'], c['alignment']], write_bppml_file_action)[0]

@w.add_target()
def ml_tree(outdir, c):
    target_base = os.path.join(outdir, 'ml_tree')
    target = target_base + '.tre'

    return env.Command(target,
            [c['bppml_file'], c['alignment'], c['source_tree']],
            'bppml param=$SOURCE')[0]

@w.add_target()
def lcfit(outdir, c):
    targets = [os.path.join(outdir, i) for i in ('lcfit_bls.csv', 'lcfit_maxima.csv')]
    return env.Command(targets,
            [c['alignment'], c['ml_tree'], c['model_file']],
            'lcfit-compare '
            'param=${SOURCES[2]} '
            'input.tree.file=${SOURCES[1]} '
            'input.sequence.file=${SOURCES[0]} '
            'lcfit.output.likelihoods.file=${TARGETS[0]} '
            'lcfit.output.maxima.file=${TARGETS[1]}')

@w.add_target()
def lcfit_plots(outdir, c):
    return env.Command(os.path.join(outdir, 'lcfit_plots.pdf'),
            c['lcfit'],
            'plot_fits.R $SOURCES $TARGET')
